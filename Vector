# Class List: Vector
# Author: Max Tompkins
# Date: 25/02/19

# ---Libraries---

import math

# ---Libraries---

# ---Class List---

class Vector:
    # initialisation
    def __init__(self, x = 0, y = 0):
        self.x = x
        self.y = y
        
    # String format: "(x, y)"
    def __str__(self):
        return '(' + str(self.x) + ', ' + str(self.y) + ')'
    
    # Vector + Vector
    def __add__(self, val):
        return self.copyAddVector(val)
    
    # Vector - Vector
    def __sub__(self, val):
        return self.copySubVector(val)
    
    # Vector * val
    def __mul__(self, val):
        return self.copyMultScalar(val)
    
    # Vector * val
    def __rmul__(self, val):
        return self.copyMultScalar(val)
    
    # Vector / val
    def __truediv__(self, val):
        return self.copyDivScalar(val)
    
    # Vector == Vector
    def __eq__(self, other):
        return (self.x == other.x) and (self.y == other.y)
    
    # Vector != Vector
    def __ne__(self, other):
        return not self.__eq__(other)
    
    # -Vector
    def __neg__(self):
        return self.copy().negate()
    
    # Returns Vector as: (x, y)
    def getP(self):
        return (self.x, self.y)

    # Returns new Vector with values equal to self
    def copy(self):
        return Vector(self.x, self.y)
    
    # Vector * -1
    def negate(self):
        return self.multScalar(-1)
    
    # Reflects Vector given another Vector "normal"
    def reflect(self, normal):
        return self.subVector(normal.copyMultScalar(2*self.dotProduct(normal)))
    
    # Returns the numerical length of Vector
    def length(self):
        return math.sqrt(self.x**2 + self.y**2)
    
    # Returns the numerical squared length of Vector
    def lengthSquared(self):
        return self.x**2 + self.y**2
    
    # Return the angle between Vector and another Vector "other"
    def angle(self, other):
        pass
    
    # Adjusts Vector.x and Vector.y so Vector.length() is 1
    def normalise(self):
        return self.divScalar(self.length())
    
    # Returns a new Vector parallel to self where Vector.length() is 1
    def getNormalised(self):
        return self.copy().normalise()
    
    # add two vectors
    def addVector(self, other):
        self.x += other.x
        self.y += other.y
        return self
    
    # subtract two vectors
    def subVector(self, other):
        self.x -= other.x
        self.y -= other.y
        return self
    
    # multiply a vector by a scaling value
    def multScalar(self, other):
        self.x *= other
        self.y *= other
        return self
    
    # divide a vector by a scaling value
    def divScalar(self, other):
        self.x /= other
        self.y /= other
        return self
    
    # multiply two vectors
    def dotProduct(self, other):
        return (self.x * other.x) + (self.y * other.y)
    
    # copy add - doesn't alter self
    def copyAddVector(self, other):
        return self.copy().addVector(other)
    
    # copy subtract - doesn't alter self
    def copySubVector(self, other):
        return self.copy().subVector(other)
    
    # copy multiply - doesn't alter self
    def copyMultScalar(self, other):
        return self.copy().multScalar(other)
    
    # copy divide - doesn't alter self
    def copyDivScalar(self, other):
        return self.copy().divScalar(other)

# ---Class List---
